Why should we use mixins?
1.It provides a mechanism for multiple inheritance by allowing one class to use common functionality from multiple classes, but without the complex semantics of multiple inheritance.

2.Code reusability: Mixins are useful when a programmer wants to share functionality between different classes. Instead of repeating the same code over and over again, the common functionality can simply be grouped into a mixin and then included into each class that requires it.

3.Mixins allow inheritance and use of only the desired features from the parent class, not necessarily all of the features from the parent class.

When should we use mixins?
Mixins are particularly useful in scenarios where:
Common Behaviors Exist: When multiple classes share common behaviours or functionalities.
Inheritance is Inappropriate: When traditional inheritance doesn't fit well due to multiple inheritance limitations or complex relationships.

How should we use mixins?

To define a mixin, use the mixin declaration. In the rare case where you need to define both a mixin and a class, you can use the mixin class declaration. Mixins and mixin classes cannot have an extends clause, and must not declare any generative constructors.

Example 1;
Basic Mixin Usage:

mixin Logger {
  void log(String message) {
    print('Log: \$message');
  }
}

class FileManager with Logger {
  void saveFile() {
    log('File saved successfully');
  }
}

void main() {
  FileManager fm = FileManager();
  fm.saveFile(); // Output: Log: File saved successfully
}
Example 2;
Using Multiple Usage:

mixin Logger {
  void log(String message) {
    print('Log: \$message');
  }
}

mixin Printer {
  void printMessage(String message) {
    print('Message: \$message');
  }
}

class DocumentManager with Logger, Printer {
  void processDocument() {
    log('Processing document');
    printMessage('Document processed successfully');
  }
}

void main() {
  DocumentManager dm = DocumentManager();
  dm.processDocument();
}